{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the NeoPupil documentation!","text":"<p>Welcome to the NeoPupil documentation. This documentation will guide you through installation, navigating the GUI, and using the main features. You will also find technical information about the API for developers.</p>"},{"location":"#contents","title":"Contents","text":"<p>User Guide</p> <ul> <li> <p>Overview </p> <p>A general introduction to the NeoPupil project.</p> </li> <li> <p>Setup</p> <p>Instructions for installing and configuring NeoPupil.</p> </li> <li> <p>GUI Navigation</p> <p>Guide to navigating and using the graphical interface.</p> </li> </ul> <p>API</p> <ul> <li> <p>Code Documentation</p> <p>Detailed description of the functions and classes available to developers.</p> </li> </ul>"},{"location":"GUI_navigation/","title":"GUI navigation guide","text":"<p>To avoid any bugs, please follow the procedure below:</p> <p>Output Folder: </p> <ul> <li>Choose the directory where generated plots will be saved.</li> </ul> <p>File Selection: </p> <ul> <li>Use the \u201cBrowse\u201d buttons to load each required CSV file.  </li> <li>Ensure files correspond to the correct dataset type.</li> </ul> <p>Select Events: </p> <ul> <li>Click the \u201cLoad Events\u201d button, then choose the start event and end event to create an interval of interest for analysis.</li> </ul> <p>Colour:</p> <ul> <li>Choose the plotting colour in the list.</li> </ul> <p>Time: </p> <ul> <li>Set bin size in seconds for time-binned plots.</li> </ul> <p>Generate Plots: </p> <ul> <li>Click the \u201cGenerate\u201d button to run the analysis and save plots.  </li> <li>A message box will confirm completion or display errors.</li> </ul>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/matthieukeruzoret/NeoPupil.git\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol> <p>\u26a0\ufe0f Important: Make sure you don't delete any files from the main repository.</p>"},{"location":"setup/#project-files","title":"Project Files","text":"<p>Ensure you have the following CSV data files:</p> <ul> <li><code>3d_eye_states.csv</code></li> <li><code>blinks.csv</code></li> <li><code>events.csv</code></li> <li><code>fixations.csv</code></li> <li><code>gaze.csv</code></li> <li><code>saccades.csv</code></li> </ul> <p>Create an output folder where plots will be saved.  </p> <p>\u26a0\ufe0f Important: Make sure you don't change the column names in each cited file.</p>"},{"location":"setup/#running-the-program","title":"Running the Program","text":"<p>From the terminal, you can run the application: <pre><code>python GUI.py\n</code></pre></p>"},{"location":"api/GUI_py/","title":"GUI.py Documentation","text":""},{"location":"api/GUI_py/#GUI.App","title":"<code>App</code>","text":"<p>               Bases: <code>CTk</code></p> <p>Main application window for NeoPupil.</p> <p>Builds and organizes the user interface using multiple frames for: file selection, event selection, plot customization, and output generation.</p> <p>Attributes:</p> Name Type Description <code>Output_Frame</code> <code>Output_Frame</code> <p>Frame for selecting the output folder.</p> <code>Input_Frame</code> <code>Input_Frame</code> <p>Frame for selecting required input data files.</p> <code>Selected_Frame</code> <code>Select_Events</code> <p>Frame for selecting start and end events from the events file.</p> <code>Col_Int_Frame</code> <code>Col_Int_Frame</code> <p>Frame for selecting plot colors and time intervals.</p> <code>Generate_Frame</code> <code>Generate_Frame</code> <p>Frame containing the button to generate plots.</p> <code>Credits_Frame</code> <code>Credits_Frame</code> <p>Frame displaying credits and a GitHub link.</p> <code>Logo_Frame</code> <code>Logo_Frame</code> <p>Frame displaying the NeoPupil logo.</p> Source code in <code>GUI.py</code> <pre><code>class App(customtkinter.CTk):\n    \"\"\"\n    Main application window for NeoPupil.\n\n    Builds and organizes the user interface using multiple frames for:\n    file selection, event selection, plot customization, and output generation.\n\n    Attributes\n    ----------\n    Output_Frame : Output_Frame\n        Frame for selecting the output folder.\n    Input_Frame : Input_Frame\n        Frame for selecting required input data files.\n    Selected_Frame : Select_Events\n        Frame for selecting start and end events from the events file.\n    Col_Int_Frame : Col_Int_Frame\n        Frame for selecting plot colors and time intervals.\n    Generate_Frame : Generate_Frame\n        Frame containing the button to generate plots.\n    Credits_Frame : Credits_Frame\n        Frame displaying credits and a GitHub link.\n    Logo_Frame : Logo_Frame\n        Frame displaying the NeoPupil logo.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n\n        # Creating the graphical interface \n        self.title(\"NeoPupil\")\n        self.iconbitmap(\"NeoPupil.ico\")\n        w = self.winfo_screenwidth()\n        h = self.winfo_screenheight()\n        self.geometry(f\"{w}x{h}\")\n        self.grid_columnconfigure(3, weight=1)\n        self.grid_rowconfigure(4, weight=1)\n\n        # First frame (Output)\n        self.Output_Frame = Output_Frame(self)\n        self.Output_Frame.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Second frame (Input) \n        self.Input_Frame = Input_Frame(self)\n        self.Input_Frame.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Third frame (Event selection)\n        self.Selected_Frame = Select_Events(self)\n        self.Selected_Frame.grid(row=2, column=0, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Fourth frame (Graph color and time interval)\n        self.Col_Int_Frame = Col_Int_Frame(self)\n        self.Col_Int_Frame.grid(row=3, column=0, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Fifth frame (Generate plots)\n        self.Generate_Frame = Generate_Frame(self)\n        self.Generate_Frame.grid(row=4, column=0, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Sixth frame (Credits)\n        self.Credits_Frame = Credits_Frame(self)\n        self.Credits_Frame.grid(row=0, column=1, padx=10, pady=(10, 0), sticky=\"nw\")\n\n        # Seventh frame (Logo)\n        self.Logo_Frame = Logo_Frame(self)\n        self.Logo_Frame.grid(row=1,column=1, padx=10, pady=(10, 0), sticky=\"nw\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Col_Int_Frame","title":"<code>Col_Int_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame for selecting a color and time interval for plots.</p> <p>This frame loads available colors from <code>colours.csv</code> and time intervals from <code>time.csv</code>, populating two dropdown menus for user selection.</p> <p>Parameters:</p> Name Type Description Default <code>master</code> <code>CTk or CTkFrame</code> <p>The parent widget in which this frame is placed.</p> required <p>Attributes:</p> Name Type Description <code>name_col_int</code> <code>CTkLabel</code> <p>Label displaying the frame title.</p> <code>explanation</code> <code>CTkLabel</code> <p>Label explaining the color and time interval selection.</p> <code>colour_name</code> <code>str</code> <p>Default text for the color menu when no color is selected.</p> <code>colour_menu</code> <code>CTkOptionMenu</code> <p>Dropdown menu containing available color options.</p> <code>time</code> <code>str</code> <p>Default text for the time menu when no time is selected.</p> <code>time_menu</code> <code>CTkOptionMenu</code> <p>Dropdown menu containing available time interval options.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the <code>colours.csv</code> file is missing the \"colour\" column, or if the <code>time.csv</code> file is missing the \"time\" column.</p> <code>Exception</code> <p>For any other error during CSV loading or menu population.</p> Source code in <code>GUI.py</code> <pre><code>class Col_Int_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame for selecting a color and time interval for plots.\n\n    This frame loads available colors from `colours.csv` and time intervals\n    from `time.csv`, populating two dropdown menus for user selection.\n\n    Parameters\n    ----------\n    master : customtkinter.CTk or customtkinter.CTkFrame\n        The parent widget in which this frame is placed.\n\n    Attributes\n    ----------\n    name_col_int : CTkLabel\n        Label displaying the frame title.\n    explanation : CTkLabel\n        Label explaining the color and time interval selection.\n    colour_name : str\n        Default text for the color menu when no color is selected.\n    colour_menu : CTkOptionMenu\n        Dropdown menu containing available color options.\n    time : str\n        Default text for the time menu when no time is selected.\n    time_menu : CTkOptionMenu\n        Dropdown menu containing available time interval options.\n\n    Raises\n    ------\n    ValueError\n        If the `colours.csv` file is missing the \"colour\" column,\n        or if the `time.csv` file is missing the \"time\" column.\n    Exception\n        For any other error during CSV loading or menu population.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n\n        self.name_col_int = customtkinter.CTkLabel(self, text=\"4 - Colour and Time interval\")\n        self.name_col_int.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.explanation = customtkinter.CTkLabel(\n            self,\n            text=\"Select a colour for your graphics and a time interval (&lt;=60s).\"\n        )\n        self.explanation.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.colour_name = \"-- No colour selected --\"\n        self.colour_menu = customtkinter.CTkOptionMenu(self, values=[self.colour_name])\n        self.colour_menu.grid(row=2, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.time = \"-- No time selected --\"\n        self.time_menu = customtkinter.CTkOptionMenu(self, values=[self.time])\n        self.time_menu.grid(row=2, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n\n        try:\n            df_colours = pd.read_csv(\"colours.csv\")\n            if \"colour\" not in df_colours.columns:\n                raise ValueError(\"Missing 'colour' column in colours file.\")\n\n            unique_colour = df_colours[\"colour\"].dropna().unique().tolist()\n            self.colour_menu.configure(values=unique_colour)\n            self.colour_menu.set(self.colour_name)\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Could not show colours: {e}\")\n\n        try:\n            df_time = pd.read_csv(\"time.csv\")\n            if \"time\" not in df_time.columns:\n                raise ValueError(\"Missing 'time' column in time file.\")\n\n            unique_times = [str(t) for t in df_time[\"time\"].dropna().unique().tolist()]\n            self.time_menu.configure(values=unique_times)\n            self.time_menu.set(self.time)\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Could not show time: {e}\")\n\n    def get_colour(self):\n        \"\"\"\n        Get the currently selected color.\n\n        Returns\n        -------\n        str\n            The selected color from the dropdown menu.\n        \"\"\"\n        return self.colour_menu.get()\n\n    def get_time(self):\n        \"\"\"\n        Get the currently selected time interval.\n\n        Returns\n        -------\n        str\n            The selected time interval (in seconds) from the dropdown menu.\n        \"\"\"\n        return self.time_menu.get()\n</code></pre>"},{"location":"api/GUI_py/#GUI.Col_Int_Frame.get_colour","title":"<code>get_colour()</code>","text":"<p>Get the currently selected color.</p> <p>Returns:</p> Type Description <code>str</code> <p>The selected color from the dropdown menu.</p> Source code in <code>GUI.py</code> <pre><code>def get_colour(self):\n    \"\"\"\n    Get the currently selected color.\n\n    Returns\n    -------\n    str\n        The selected color from the dropdown menu.\n    \"\"\"\n    return self.colour_menu.get()\n</code></pre>"},{"location":"api/GUI_py/#GUI.Col_Int_Frame.get_time","title":"<code>get_time()</code>","text":"<p>Get the currently selected time interval.</p> <p>Returns:</p> Type Description <code>str</code> <p>The selected time interval (in seconds) from the dropdown menu.</p> Source code in <code>GUI.py</code> <pre><code>def get_time(self):\n    \"\"\"\n    Get the currently selected time interval.\n\n    Returns\n    -------\n    str\n        The selected time interval (in seconds) from the dropdown menu.\n    \"\"\"\n    return self.time_menu.get()\n</code></pre>"},{"location":"api/GUI_py/#GUI.Credits_Frame","title":"<code>Credits_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame displaying application credits and GitHub link.</p> Source code in <code>GUI.py</code> <pre><code>class Credits_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame displaying application credits and GitHub link.\n    \"\"\"\n    def __init__(self,master):\n        super().__init__(master)\n\n        self.title_credits = customtkinter.CTkLabel(self,text=\" Credits\")\n        self.title_credits.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.credits = customtkinter.CTkLabel(self,text=\"Matthieu K\u00c9RUZORET\")\n        self.credits.grid(row=1, column=0, padx=10, sticky=\"w\")\n\n        self.github = customtkinter.CTkLabel(\n            self,\n            text=\"\ud83d\udd27GitHub\",\n            cursor=\"hand2\",\n            font=customtkinter.CTkFont(underline=True)\n        )\n        self.github.grid(row=2, column=0, padx=10, sticky=\"w\")\n        self.github.bind(\"&lt;Button-1&gt;\", lambda e: self.open_link())\n\n    def open_link(self):\n        webbrowser.open(\"https://github.com/matthieukeruzoret\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Generate_Frame","title":"<code>Generate_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame containing the plot generation button.</p> Source code in <code>GUI.py</code> <pre><code>class Generate_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame containing the plot generation button.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n        self.name_generate = customtkinter.CTkLabel(self, text=\"5 - Generate plots\")\n        self.name_generate.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.generate_button = customtkinter.CTkButton(self, text=\"Generate\", command=self.generate_plots)\n        self.generate_button.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n    def generate_plots(self):\n        \"\"\"\n        Generate plots based on the provided input files and settings.\n\n        Raises\n        ------\n        FileNotFoundError\n            If any required input file is missing.\n        ValueError\n            If start or end events are not specified.\n        \"\"\"\n        try:\n            output_folder = self.master.Output_Frame.selected_output_folder\n            pupil_file = self.master.Input_Frame.selected_pupil_file\n            blinks_file = self.master.Input_Frame.selected_blinks_file\n            events_file = self.master.Input_Frame.selected_events_file\n            fixations_file = self.master.Input_Frame.selected_fixations_file\n            gaze_file = self.master.Input_Frame.selected_gaze_file\n            saccades_file = self.master.Input_Frame.selected_saccades_file\n            start_event, end_event = self.master.Selected_Frame.get_selected_events()\n            color = self.master.Col_Int_Frame.get_colour()\n            time = self.master.Col_Int_Frame.get_time()\n\n            if not all([output_folder, pupil_file, events_file, blinks_file, fixations_file, gaze_file, saccades_file]):\n                raise FileNotFoundError(\"Missing required file(s).\")\n\n            if not start_event or not end_event:\n                raise ValueError(\"Start and end events must be specified.\")\n\n            if not color:\n                raise ValueError(\"No color selected.\")\n\n            if not time:\n                raise ValueError(\"No time selected.\")\n\n            # Call the main plotting function\n            main.generate_plots(\n                blinks_file=blinks_file,\n                pupil_file=pupil_file,\n                events_file=events_file,\n                fixations_file=fixations_file,\n                gaze_file=gaze_file,\n                saccades_file=saccades_file,\n                output_folder=output_folder,\n                start_event=start_event,\n                end_event=end_event,\n                colour=color,\n                time=time\n            )\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"An error occurred: {e}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Generate_Frame.generate_plots","title":"<code>generate_plots()</code>","text":"<p>Generate plots based on the provided input files and settings.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If any required input file is missing.</p> <code>ValueError</code> <p>If start or end events are not specified.</p> Source code in <code>GUI.py</code> <pre><code>def generate_plots(self):\n    \"\"\"\n    Generate plots based on the provided input files and settings.\n\n    Raises\n    ------\n    FileNotFoundError\n        If any required input file is missing.\n    ValueError\n        If start or end events are not specified.\n    \"\"\"\n    try:\n        output_folder = self.master.Output_Frame.selected_output_folder\n        pupil_file = self.master.Input_Frame.selected_pupil_file\n        blinks_file = self.master.Input_Frame.selected_blinks_file\n        events_file = self.master.Input_Frame.selected_events_file\n        fixations_file = self.master.Input_Frame.selected_fixations_file\n        gaze_file = self.master.Input_Frame.selected_gaze_file\n        saccades_file = self.master.Input_Frame.selected_saccades_file\n        start_event, end_event = self.master.Selected_Frame.get_selected_events()\n        color = self.master.Col_Int_Frame.get_colour()\n        time = self.master.Col_Int_Frame.get_time()\n\n        if not all([output_folder, pupil_file, events_file, blinks_file, fixations_file, gaze_file, saccades_file]):\n            raise FileNotFoundError(\"Missing required file(s).\")\n\n        if not start_event or not end_event:\n            raise ValueError(\"Start and end events must be specified.\")\n\n        if not color:\n            raise ValueError(\"No color selected.\")\n\n        if not time:\n            raise ValueError(\"No time selected.\")\n\n        # Call the main plotting function\n        main.generate_plots(\n            blinks_file=blinks_file,\n            pupil_file=pupil_file,\n            events_file=events_file,\n            fixations_file=fixations_file,\n            gaze_file=gaze_file,\n            saccades_file=saccades_file,\n            output_folder=output_folder,\n            start_event=start_event,\n            end_event=end_event,\n            colour=color,\n            time=time\n        )\n\n    except Exception as e:\n        messagebox.showerror(\"Error\", f\"An error occurred: {e}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame","title":"<code>Input_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame for selecting input CSV files.</p> <p>Attributes:</p> Name Type Description <code>selected_pupil_file</code> <code>str</code> <p>Path to the pupil data file.</p> <code>selected_blinks_file</code> <code>str</code> <p>Path to the blinks data file.</p> <code>selected_events_file</code> <code>str</code> <p>Path to the events data file.</p> <code>selected_fixations_file</code> <code>str</code> <p>Path to the fixations data file.</p> <code>selected_gaze_file</code> <code>str</code> <p>Path to the gaze data file.</p> <code>selected_saccades_file</code> <code>str</code> <p>Path to the saccades data file.</p> Source code in <code>GUI.py</code> <pre><code>class Input_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame for selecting input CSV files.\n\n    Attributes\n    ----------\n    selected_pupil_file : str\n        Path to the pupil data file.\n    selected_blinks_file : str\n        Path to the blinks data file.\n    selected_events_file : str\n        Path to the events data file.\n    selected_fixations_file : str\n        Path to the fixations data file.\n    selected_gaze_file : str\n        Path to the gaze data file.\n    selected_saccades_file : str\n        Path to the saccades data file.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n\n        self.name_input = customtkinter.CTkLabel(self, text=\"2 - Input files\")\n        self.name_input.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        # Pupil file\n        self.pupil_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the 3d_eye_states file\")\n        self.pupil_file.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_pupil_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_pupil)\n        self.select_pupil_button.grid(row=1, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_pupil_file = \"\"\n\n        # Blinks file\n        self.blinks_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the blinks file\")\n        self.blinks_file.grid(row=2, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_blinks_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_blinks)\n        self.select_blinks_button.grid(row=2, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_blinks_file = \"\"\n\n        # Events file\n        self.events_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the events file\")\n        self.events_file.grid(row=3, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_events_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_events)\n        self.select_events_button.grid(row=3, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_events_file = \"\"\n\n        # Fixations file\n        self.fixations_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the fixations file\")\n        self.fixations_file.grid(row=4, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_fixations_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_fixations)\n        self.select_fixations_button.grid(row=4, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_fixations_file = \"\"\n\n        # Gaze file\n        self.gaze_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the gaze file\")\n        self.gaze_file.grid(row=5, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_gaze_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_gaze)\n        self.select_gaze_button.grid(row=5, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_gaze_file = \"\"\n\n        # Saccades file\n        self.saccades_file = customtkinter.CTkEntry(self, placeholder_text=\"Select the saccades file\")\n        self.saccades_file.grid(row=6, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n        self.select_saccades_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_saccades)\n        self.select_saccades_button.grid(row=6, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n        self.selected_saccades_file = \"\"\n\n    def select_pupil(self):\n        \"\"\"\n        Select the pupil data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.pupil_file.delete(0, customtkinter.END)\n            self.pupil_file.insert(0, file_path)\n        self.selected_pupil_file = file_path\n        print(f\"Pupil file: {self.selected_pupil_file}\")\n\n    def select_blinks(self):\n        \"\"\"\n        Select the blinks data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.blinks_file.delete(0, customtkinter.END)\n            self.blinks_file.insert(0, file_path)\n        self.selected_blinks_file = file_path\n        print(f\"Blinks file: {self.selected_blinks_file}\")\n\n    def select_events(self):\n        \"\"\"\n        Select the events data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.events_file.delete(0, customtkinter.END)\n            self.events_file.insert(0, file_path)\n        self.selected_events_file = file_path\n        print(f\"Events file: {self.selected_events_file}\")\n\n    def select_fixations(self):\n        \"\"\"\n        Select the fixations data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.fixations_file.delete(0, customtkinter.END)\n            self.fixations_file.insert(0, file_path)\n        self.selected_fixations_file = file_path\n        print(f\"Fixations file: {self.selected_fixations_file}\")\n\n    def select_gaze(self):\n        \"\"\"\n        Select the gaze data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.gaze_file.delete(0, customtkinter.END)\n            self.gaze_file.insert(0, file_path)\n        self.selected_gaze_file = file_path\n        print(f\"Gaze file: {self.selected_gaze_file}\")\n\n    def select_saccades(self):\n        \"\"\"\n        Select the saccades data file.\n        \"\"\"\n        file_path = filedialog.askopenfilename()\n        if file_path:\n            self.saccades_file.delete(0, customtkinter.END)\n            self.saccades_file.insert(0, file_path)\n        self.selected_saccades_file = file_path\n        print(f\"Saccades file: {self.selected_saccades_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_blinks","title":"<code>select_blinks()</code>","text":"<p>Select the blinks data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_blinks(self):\n    \"\"\"\n    Select the blinks data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.blinks_file.delete(0, customtkinter.END)\n        self.blinks_file.insert(0, file_path)\n    self.selected_blinks_file = file_path\n    print(f\"Blinks file: {self.selected_blinks_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_events","title":"<code>select_events()</code>","text":"<p>Select the events data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_events(self):\n    \"\"\"\n    Select the events data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.events_file.delete(0, customtkinter.END)\n        self.events_file.insert(0, file_path)\n    self.selected_events_file = file_path\n    print(f\"Events file: {self.selected_events_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_fixations","title":"<code>select_fixations()</code>","text":"<p>Select the fixations data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_fixations(self):\n    \"\"\"\n    Select the fixations data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.fixations_file.delete(0, customtkinter.END)\n        self.fixations_file.insert(0, file_path)\n    self.selected_fixations_file = file_path\n    print(f\"Fixations file: {self.selected_fixations_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_gaze","title":"<code>select_gaze()</code>","text":"<p>Select the gaze data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_gaze(self):\n    \"\"\"\n    Select the gaze data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.gaze_file.delete(0, customtkinter.END)\n        self.gaze_file.insert(0, file_path)\n    self.selected_gaze_file = file_path\n    print(f\"Gaze file: {self.selected_gaze_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_pupil","title":"<code>select_pupil()</code>","text":"<p>Select the pupil data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_pupil(self):\n    \"\"\"\n    Select the pupil data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.pupil_file.delete(0, customtkinter.END)\n        self.pupil_file.insert(0, file_path)\n    self.selected_pupil_file = file_path\n    print(f\"Pupil file: {self.selected_pupil_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Input_Frame.select_saccades","title":"<code>select_saccades()</code>","text":"<p>Select the saccades data file.</p> Source code in <code>GUI.py</code> <pre><code>def select_saccades(self):\n    \"\"\"\n    Select the saccades data file.\n    \"\"\"\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        self.saccades_file.delete(0, customtkinter.END)\n        self.saccades_file.insert(0, file_path)\n    self.selected_saccades_file = file_path\n    print(f\"Saccades file: {self.selected_saccades_file}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Logo_Frame","title":"<code>Logo_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame for displaying the application logo.</p> Source code in <code>GUI.py</code> <pre><code>class Logo_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame for displaying the application logo.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n        try:\n            image_path = \"NeoPupil.png\"\n            image = Image.open(image_path)\n            self.logo = customtkinter.CTkImage(light_image=image, dark_image=image, size=(80, 80))\n            self.logo_label = customtkinter.CTkLabel(self, image=self.logo, text=\"\")\n            self.logo_label.grid(row=0, column=1, rowspan=2, padx=20, pady=10)\n        except FileNotFoundError:\n            self.logo_label = customtkinter.CTkLabel(self, text=\"[Logo Missing]\")\n            self.logo_label.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Output_Frame","title":"<code>Output_Frame</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame for selecting the output folder.</p> <p>Attributes:</p> Name Type Description <code>name_output</code> <code>CTkLabel</code> <p>Label describing this frame.</p> <code>output_folder</code> <code>CTkEntry</code> <p>Entry for displaying the selected folder path.</p> <code>select_folder_button</code> <code>CTkButton</code> <p>Button for opening a folder selection dialog.</p> <code>selected_output_folder</code> <code>str</code> <p>Path to the selected output folder.</p> Source code in <code>GUI.py</code> <pre><code>class Output_Frame(customtkinter.CTkFrame):\n    \"\"\"\n    Frame for selecting the output folder.\n\n    Attributes\n    ----------\n    name_output : CTkLabel\n        Label describing this frame.\n    output_folder : CTkEntry\n        Entry for displaying the selected folder path.\n    select_folder_button : CTkButton\n        Button for opening a folder selection dialog.\n    selected_output_folder : str\n        Path to the selected output folder.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n        self.name_output = customtkinter.CTkLabel(self, text=\"1 - Output folder\")\n        self.name_output.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.output_folder = customtkinter.CTkEntry(self, placeholder_text=\"Select a folder\")\n        self.output_folder.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.select_folder_button = customtkinter.CTkButton(self, text=\"Browse\", command=self.select_folder)\n        self.select_folder_button.grid(row=1, column=1, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.selected_output_folder = \"\"  \n\n    def select_folder(self):\n        \"\"\"\n        Open a folder selection dialog.\n\n        Updates both the entry field and `selected_output_folder` with the chosen path.\n        \"\"\"\n        folder_path = filedialog.askdirectory()  \n        if folder_path:  \n            self.output_folder.delete(0, customtkinter.END)\n            self.output_folder.insert(0, folder_path)\n            self.selected_output_folder = folder_path\n            print(f\"Output folder selected: {self.selected_output_folder}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Output_Frame.select_folder","title":"<code>select_folder()</code>","text":"<p>Open a folder selection dialog.</p> <p>Updates both the entry field and <code>selected_output_folder</code> with the chosen path.</p> Source code in <code>GUI.py</code> <pre><code>def select_folder(self):\n    \"\"\"\n    Open a folder selection dialog.\n\n    Updates both the entry field and `selected_output_folder` with the chosen path.\n    \"\"\"\n    folder_path = filedialog.askdirectory()  \n    if folder_path:  \n        self.output_folder.delete(0, customtkinter.END)\n        self.output_folder.insert(0, folder_path)\n        self.selected_output_folder = folder_path\n        print(f\"Output folder selected: {self.selected_output_folder}\")\n</code></pre>"},{"location":"api/GUI_py/#GUI.Select_Events","title":"<code>Select_Events</code>","text":"<p>               Bases: <code>CTkFrame</code></p> <p>Frame for selecting start and end events from the events file.</p> <p>Attributes:</p> Name Type Description <code>start_event</code> <code>str</code> <p>Name of the event to mark the start of the analysis period.</p> <code>end_event</code> <code>str</code> <p>Name of the event to mark the end of the analysis period.</p> Source code in <code>GUI.py</code> <pre><code>class Select_Events(customtkinter.CTkFrame):\n    \"\"\"\n    Frame for selecting start and end events from the events file.\n\n    Attributes\n    ----------\n    start_event : str\n        Name of the event to mark the start of the analysis period.\n    end_event : str\n        Name of the event to mark the end of the analysis period.\n    \"\"\"\n    def __init__(self, master):\n        super().__init__(master)\n        self.name_selected = customtkinter.CTkLabel(self, text=\"3 - Select Events\")\n        self.name_selected.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.explanation = customtkinter.CTkLabel(self, text=\"Select start and end events to define an interval.\")\n        self.explanation.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.event_names = [\"-- No events loaded --\"]\n        self.start_menu = customtkinter.CTkOptionMenu(self, values=self.event_names)\n        self.start_menu.grid(row=2, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.end_menu = customtkinter.CTkOptionMenu(self, values=self.event_names)\n        self.end_menu.grid(row=3, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n        self.load_button = customtkinter.CTkButton(self, text=\"Load Events\", command=self.load_events)\n        self.load_button.grid(row=4, column=0, padx=10, pady=(10, 0), sticky=\"w\")\n\n    def load_events(self):\n        \"\"\"\n        Load events from the selected events CSV file into the dropdown menus.\n\n        Reads the events file, extracts the unique event names, and populates\n        the start and end event selection menus with these values.\n\n        Requires that the user has selected an events file in the `Input_Frame`.\n\n        Raises\n        ------\n        FileNotFoundError\n            If no events file has been selected.\n        ValueError\n            If the events file does not contain a 'name' column.\n        Exception\n            For any other errors during file reading or menu population.\n\n        See Also\n        --------\n        get_selected_events : Retrieve the currently selected start and end events.\n        \"\"\"\n        events_path = self.master.Input_Frame.selected_events_file\n        if not events_path:\n            messagebox.showwarning(\"Missing file\", \"Please select an events file first.\")\n            return\n        try:\n            df = pd.read_csv(events_path)\n            if \"name\" not in df.columns:\n                raise ValueError(\"Missing 'name' column in events file.\")\n\n            unique_events = df[\"name\"].dropna().unique().tolist()\n\n            self.start_menu.configure(values=unique_events)\n            self.start_menu.set(unique_events[0])\n\n            self.end_menu.configure(values=unique_events)\n            self.end_menu.set(unique_events[-1])\n\n            print(\"\u2705 Events loaded in dropdowns.\")\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Could not load events: {e}\")\n\n    def get_selected_events(self):\n        \"\"\"\n        Get the currently selected start and end events.\n\n        Returns\n        -------\n        tuple of str\n            The start event and end event currently selected in the dropdown menus.\n\n        See Also\n        --------\n        load_events : Populate the dropdown menus with available events.\n        \"\"\"\n        return self.start_menu.get(), self.end_menu.get()\n</code></pre>"},{"location":"api/GUI_py/#GUI.Select_Events.get_selected_events","title":"<code>get_selected_events()</code>","text":"<p>Get the currently selected start and end events.</p> <p>Returns:</p> Type Description <code>tuple of str</code> <p>The start event and end event currently selected in the dropdown menus.</p> See Also <p>load_events : Populate the dropdown menus with available events.</p> Source code in <code>GUI.py</code> <pre><code>def get_selected_events(self):\n    \"\"\"\n    Get the currently selected start and end events.\n\n    Returns\n    -------\n    tuple of str\n        The start event and end event currently selected in the dropdown menus.\n\n    See Also\n    --------\n    load_events : Populate the dropdown menus with available events.\n    \"\"\"\n    return self.start_menu.get(), self.end_menu.get()\n</code></pre>"},{"location":"api/GUI_py/#GUI.Select_Events.load_events","title":"<code>load_events()</code>","text":"<p>Load events from the selected events CSV file into the dropdown menus.</p> <p>Reads the events file, extracts the unique event names, and populates the start and end event selection menus with these values.</p> <p>Requires that the user has selected an events file in the <code>Input_Frame</code>.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If no events file has been selected.</p> <code>ValueError</code> <p>If the events file does not contain a 'name' column.</p> <code>Exception</code> <p>For any other errors during file reading or menu population.</p> See Also <p>get_selected_events : Retrieve the currently selected start and end events.</p> Source code in <code>GUI.py</code> <pre><code>def load_events(self):\n    \"\"\"\n    Load events from the selected events CSV file into the dropdown menus.\n\n    Reads the events file, extracts the unique event names, and populates\n    the start and end event selection menus with these values.\n\n    Requires that the user has selected an events file in the `Input_Frame`.\n\n    Raises\n    ------\n    FileNotFoundError\n        If no events file has been selected.\n    ValueError\n        If the events file does not contain a 'name' column.\n    Exception\n        For any other errors during file reading or menu population.\n\n    See Also\n    --------\n    get_selected_events : Retrieve the currently selected start and end events.\n    \"\"\"\n    events_path = self.master.Input_Frame.selected_events_file\n    if not events_path:\n        messagebox.showwarning(\"Missing file\", \"Please select an events file first.\")\n        return\n    try:\n        df = pd.read_csv(events_path)\n        if \"name\" not in df.columns:\n            raise ValueError(\"Missing 'name' column in events file.\")\n\n        unique_events = df[\"name\"].dropna().unique().tolist()\n\n        self.start_menu.configure(values=unique_events)\n        self.start_menu.set(unique_events[0])\n\n        self.end_menu.configure(values=unique_events)\n        self.end_menu.set(unique_events[-1])\n\n        print(\"\u2705 Events loaded in dropdowns.\")\n\n    except Exception as e:\n        messagebox.showerror(\"Error\", f\"Could not load events: {e}\")\n</code></pre>"},{"location":"api/code_documentation/","title":"Code documentation","text":"<p>This section provides detailed technical documentation for NeoPupil\u2019s source code. Each module is described with its purpose, main functions, and role within the application.</p>"},{"location":"api/code_documentation/#contents","title":"Contents","text":"<ul> <li> <p>GUI.py</p> <p>Manages the graphical user interface.</p> </li> <li> <p>main_plots.py</p> <p>Generates and saves plots.</p> </li> </ul>"},{"location":"api/main_plots_py/","title":"Main_plots.py documentation","text":""},{"location":"api/main_plots_py/#main_plots.format_time","title":"<code>format_time(sec)</code>","text":"<p>Format seconds into a string representing minutes and seconds.</p> <p>Parameters:</p> Name Type Description Default <code>sec</code> <code>float or int</code> <p>Time duration in seconds.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Formatted time string in \"XmYs\" or \"Xs\" format.</p> Source code in <code>main_plots.py</code> <pre><code>def format_time(sec):\n    \"\"\"\n    Format seconds into a string representing minutes and seconds.\n\n    Parameters\n    ----------\n    sec : float or int\n        Time duration in seconds.\n\n    Returns\n    -------\n    str\n        Formatted time string in \"XmYs\" or \"Xs\" format.\n    \"\"\"\n    if sec &lt; 60:\n        return f\"{int(sec)}s\"\n    else:\n        m, s = int(sec // 60), int(sec % 60)\n        return f\"{m}m{s}s\" if s else f\"{m}m\"\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.gaze_plot","title":"<code>gaze_plot(df, events_df, start_ts, end_ts, label, output_folder, colour)</code>","text":"<p>Generate gaze path plots between pairs of events and aggregate gaze plot over the entire interval.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing gaze data with timestamps and coordinates.</p> required <code>events_df</code> <code>DataFrame</code> <p>DataFrame containing event timestamps and names.</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds.</p> required <code>label</code> <code>str</code> <p>Label used for naming plots.</p> required <code>output_folder</code> <code>str</code> <p>Folder path to save gaze plots.</p> required <code>colour</code> <code>str</code> <p>Color used for plotting gaze paths.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>main_plots.py</code> <pre><code>def gaze_plot(df, events_df, start_ts, end_ts, label, output_folder, colour):\n    \"\"\"\n    Generate gaze path plots between pairs of events and aggregate gaze plot over the entire interval.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing gaze data with timestamps and coordinates.\n    events_df : pandas.DataFrame\n        DataFrame containing event timestamps and names.\n    start_ts : int\n        Start timestamp in nanoseconds.\n    end_ts : int\n        End timestamp in nanoseconds.\n    label : str\n        Label used for naming plots.\n    output_folder : str\n        Folder path to save gaze plots.\n    colour : str\n        Color used for plotting gaze paths.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    interval_events = events_df[(events_df[\"timestamp [ns]\"] &gt;= start_ts) &amp;\n                                (events_df[\"timestamp [ns]\"] &lt;= end_ts)].reset_index(drop=True)\n\n    all_points = []\n\n    gaze_plots_folder = os.path.join(output_folder, f\"gaze_plots_{label}\")\n    os.makedirs(gaze_plots_folder, exist_ok=True)\n\n    for i in range(len(interval_events) - 1):\n        e1, e2 = interval_events.iloc[i], interval_events.iloc[i + 1]\n        mask = (df[\"timestamp [ns]\"] &gt;= e1[\"timestamp [ns]\"]) &amp; (df[\"timestamp [ns]\"] &lt; e2[\"timestamp [ns]\"])\n        subset = df[mask][[\"gaze x [px]\", \"gaze y [px]\"]].dropna()\n\n        if not subset.empty:\n            all_points.append(subset)\n\n            fig_i, ax_i = plt.subplots()\n            ax_i.plot(subset[\"gaze x [px]\"], subset[\"gaze y [px]\"], alpha=0.7, linewidth=1,color=colour)\n            ax_i.set_title(f\"Gaze Path between {e1['name']} and {e2['name']}\")\n            ax_i.set_xlabel(\"Gaze X [px]\")\n            ax_i.set_ylabel(\"Gaze Y [px]\")\n            ax_i.set_xlim(subset[\"gaze x [px]\"].min(), subset[\"gaze x [px]\"].max())\n            ax_i.set_ylim(subset[\"gaze y [px]\"].min(), subset[\"gaze y [px]\"].max())\n            ax_i.invert_yaxis()\n\n            path_fig = os.path.join(gaze_plots_folder, f\"gaze_path_{e1['name']} \u279d {e2['name']}.png\")\n            fig_i.savefig(path_fig)\n            plt.close(fig_i)\n\n    if all_points:\n        fig, ax = plt.subplots()\n        for subset in all_points:\n            ax.plot(subset[\"gaze x [px]\"], subset[\"gaze y [px]\"], alpha=0.6, linewidth=1)\n\n        plot_df = pd.concat(all_points, ignore_index=True)\n        ax.set_title(f\"Gaze plot - {label}\")\n        ax.set_xlabel(\"Gaze X [px]\")\n        ax.set_ylabel(\"Gaze Y [px]\")\n        ax.set_xlim(plot_df[\"gaze x [px]\"].min(), plot_df[\"gaze x [px]\"].max())\n        ax.set_ylim(plot_df[\"gaze y [px]\"].min(), plot_df[\"gaze y [px]\"].max())\n        ax.invert_yaxis()\n\n        os.makedirs(output_folder, exist_ok=True)\n        fig_path = os.path.join(output_folder, f\"gaze_plot_{label}.png\")\n        fig.savefig(fig_path)\n        plt.close(fig)\n    else:\n        print(f\"\u26a0\ufe0f No gaze point detected between events ({label}).\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.generate_frequency_plot_between_events","title":"<code>generate_frequency_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour)</code>","text":"<p>Generate a line plot showing frequency (occurrences per second) of events between pairs of events.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing event durations and timestamps.</p> required <code>events_df</code> <code>DataFrame</code> <p>DataFrame containing event timestamps and names.</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds for filtering events.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds for filtering events.</p> required <code>label</code> <code>str</code> <p>Label for the type of events (e.g., 'blinks', 'fixations').</p> required <code>output_folder</code> <code>str</code> <p>Folder path to save the plot image.</p> required <code>colour</code> <code>str</code> <p>Color used for plotting lines.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>main_plots.py</code> <pre><code>def generate_frequency_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour):\n    \"\"\"\n    Generate a line plot showing frequency (occurrences per second) of events between pairs of events.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing event durations and timestamps.\n    events_df : pandas.DataFrame\n        DataFrame containing event timestamps and names.\n    start_ts : int\n        Start timestamp in nanoseconds for filtering events.\n    end_ts : int\n        End timestamp in nanoseconds for filtering events.\n    label : str\n        Label for the type of events (e.g., 'blinks', 'fixations').\n    output_folder : str\n        Folder path to save the plot image.\n    colour : str\n        Color used for plotting lines.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    interval_events = events_df[(events_df[\"timestamp [ns]\"] &gt;= start_ts) &amp;\n                                (events_df[\"timestamp [ns]\"] &lt;= end_ts)].reset_index(drop=True)\n    results = []\n\n    for i in range(len(interval_events) - 1):\n        e1, e2 = interval_events.iloc[i], interval_events.iloc[i + 1]\n        mask = (df[\"start timestamp [ns]\"] &gt;= e1[\"timestamp [ns]\"]) &amp; (df[\"start timestamp [ns]\"] &lt; e2[\"timestamp [ns]\"])\n        subset = df[mask]\n\n        delta_s = (e2[\"timestamp [ns]\"] - e1[\"timestamp [ns]\"]) / 1_000_000_000\n        freq = subset[\"duration [ms]\"].count() / delta_s\n\n        results.append({\n            \"label\": f\"{e1['name']} \u279d {e2['name']}\",\n            \"freq\": freq\n        })\n\n    if results:\n        plot_df = pd.DataFrame(results)\n        plt.figure(figsize=(12, 6))\n        plt.plot(plot_df[\"label\"], plot_df[\"freq\"], color=colour)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Frequency of {label} (occurrences/second)\")\n        plt.title(f\"{label.capitalize()} between events\")\n        plt.tight_layout()\n        path= os.path.join(output_folder, f\"{label}_frequency_per_event.png\")\n        plt.savefig(path)\n        plt.close()\n    else:\n        print(f\"\u26a0\ufe0f No {label} detected between events.\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.generate_mean_std_plot_between_events","title":"<code>generate_mean_std_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour)</code>","text":"<p>Generate bar plot of mean and standard deviation of event durations between pairs of events.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing event durations and timestamps.</p> required <code>events_df</code> <code>DataFrame</code> <p>DataFrame containing event timestamps and names.</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds for filtering events.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds for filtering events.</p> required <code>label</code> <code>str</code> <p>Label for the type of events (e.g., 'blinks', 'fixations').</p> required <code>output_folder</code> <code>str</code> <p>Folder path to save the plot image.</p> required <code>colour</code> <code>str</code> <p>Color used for plotting bars.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>main_plots.py</code> <pre><code>def generate_mean_std_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour):\n    \"\"\"\n    Generate bar plot of mean and standard deviation of event durations between pairs of events.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing event durations and timestamps.\n    events_df : pandas.DataFrame\n        DataFrame containing event timestamps and names.\n    start_ts : int\n        Start timestamp in nanoseconds for filtering events.\n    end_ts : int\n        End timestamp in nanoseconds for filtering events.\n    label : str\n        Label for the type of events (e.g., 'blinks', 'fixations').\n    output_folder : str\n        Folder path to save the plot image.\n    colour : str\n        Color used for plotting bars.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    interval_events = events_df[(events_df[\"timestamp [ns]\"] &gt;= start_ts) &amp;\n                                (events_df[\"timestamp [ns]\"] &lt;= end_ts)].reset_index(drop=True)\n    results = []\n\n    for i in range(len(interval_events) - 1):\n        e1, e2 = interval_events.iloc[i], interval_events.iloc[i + 1]\n        mask = (df[\"start timestamp [ns]\"] &gt;= e1[\"timestamp [ns]\"]) &amp; (df[\"start timestamp [ns]\"] &lt; e2[\"timestamp [ns]\"])\n        subset = df[mask]\n\n        results.append({\n            \"label\": f\"{e1['name']} \u279d {e2['name']}\",\n            \"mean\": subset[\"duration [ms]\"].mean(),\n            \"std\": subset[\"duration [ms]\"].std(),\n        })\n\n    if results:\n        plot_df = pd.DataFrame(results)\n        plt.figure(figsize=(12, 6))\n        plt.bar(plot_df[\"label\"], plot_df[\"mean\"], yerr=plot_df[\"std\"], capsize=5, color=colour, alpha=0.8)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Mean duration of {label} (ms)\")\n        plt.title(f\"{label.capitalize()} between events\")\n        plt.tight_layout()\n        path = os.path.join(output_folder, f\"{label}_means_per_event.png\")\n        plt.savefig(path)\n        plt.close()\n    else:\n        print(f\"\u26a0\ufe0f No {label} detected between events.\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.generate_plots","title":"<code>generate_plots(blinks_file, pupil_file, events_file, fixations_file, gaze_file, saccades_file, output_folder, start_event=None, end_event=None, colour=None, time=None)</code>","text":"<p>Generate various plots from eye-tracking data files and save them to an output folder.</p> <p>Parameters:</p> Name Type Description Default <code>blinks_file</code> <code>str</code> <p>Path to CSV file containing blink data.</p> required <code>pupil_file</code> <code>str</code> <p>Path to CSV file containing pupil diameter data.</p> required <code>events_file</code> <code>str</code> <p>Path to CSV file containing event timestamps and names.</p> required <code>fixations_file</code> <code>str</code> <p>Path to CSV file containing fixation data.</p> required <code>gaze_file</code> <code>str</code> <p>Path to CSV file containing gaze point data.</p> required <code>saccades_file</code> <code>str</code> <p>Path to CSV file containing saccade data.</p> required <code>output_folder</code> <code>str</code> <p>Directory path where generated plots will be saved.</p> required <code>start_event</code> <code>str</code> <p>Name of the starting event for interval-based analyses (default is None).</p> <code>None</code> <code>end_event</code> <code>str</code> <p>Name of the ending event for interval-based analyses (default is None).</p> <code>None</code> <code>colour</code> <code>str</code> <p>Color used in plotting (default is None). Must be provided to generate plots.</p> <code>None</code> <code>time</code> <code>int or float</code> <p>Time bin size in seconds for binned plots (default is None).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Saves multiple plots as PNG files in the specified output folder. Displays message boxes on successful plot generation or errors. Prints warnings if data or parameters are missing.</p> Source code in <code>main_plots.py</code> <pre><code>def generate_plots(blinks_file, pupil_file, events_file, fixations_file, gaze_file, saccades_file, output_folder, start_event=None, end_event=None, colour=None, time=None):\n    \"\"\"\n    Generate various plots from eye-tracking data files and save them to an output folder.\n\n    Parameters\n    ----------\n    blinks_file : str\n        Path to CSV file containing blink data.\n    pupil_file : str\n        Path to CSV file containing pupil diameter data.\n    events_file : str\n        Path to CSV file containing event timestamps and names.\n    fixations_file : str\n        Path to CSV file containing fixation data.\n    gaze_file : str\n        Path to CSV file containing gaze point data.\n    saccades_file : str\n        Path to CSV file containing saccade data.\n    output_folder : str\n        Directory path where generated plots will be saved.\n    start_event : str, optional\n        Name of the starting event for interval-based analyses (default is None).\n    end_event : str, optional\n        Name of the ending event for interval-based analyses (default is None).\n    colour : str, optional\n        Color used in plotting (default is None). Must be provided to generate plots.\n    time : int or float, optional\n        Time bin size in seconds for binned plots (default is None).\n\n    Returns\n    -------\n    None\n        Saves multiple plots as PNG files in the specified output folder.\n        Displays message boxes on successful plot generation or errors.\n        Prints warnings if data or parameters are missing.\n    \"\"\"\n    try:\n        print(\"\ud83d\udce5 Uploading files...\")\n        blinks_df = pd.read_csv(blinks_file)\n        events_df = pd.read_csv(events_file)\n        fixations_df = pd.read_csv(fixations_file)\n        gaze_df = pd.read_csv(gaze_file)\n        saccades_df = pd.read_csv(saccades_file)\n        pupil_df = pd.read_csv(pupil_file)\n\n        os.makedirs(output_folder, exist_ok=True)\n        print(\"\ud83d\udcc1 Output folder ready.\")\n\n        if colour :\n            # Blink plots\n            plt.figure(figsize=(15, 7))\n            plt.plot(blinks_df[\"start timestamp [ns]\"], blinks_df[\"duration [ms]\"], \"x-\",color = colour)\n            plt.title(\"Blink duration over time\")\n            plt.xlabel(\"Events\")\n            plt.ylabel(\"Duration (ms)\")\n            plt.grid(True)\n\n            unique_event_labels = events_df.drop_duplicates(subset=[\"timestamp [ns]\"])\n            plt.xticks(\n                ticks=unique_event_labels[\"timestamp [ns]\"],\n                labels=unique_event_labels[\"name\"],\n                rotation=90,\n                ha=\"center\"\n            )\n            plt.tight_layout()\n            plt.savefig(os.path.join(output_folder, \"blinks_duration_per_event.png\"))\n            plt.close()\n\n            plt.figure(figsize=(8, 5))\n            plt.hist(\n                blinks_df[\"duration [ms]\"],\n                bins=range(int(blinks_df[\"duration [ms]\"].min()) - 10, int(blinks_df[\"duration [ms]\"].max()) + 10, 10),\n                color=colour,\n                edgecolor='black'\n            )\n            plt.title(\"Distribution of blink durations\")\n            plt.xlabel(\"Duration (ms)\")\n            plt.ylabel(\"Count\")\n            plt.tight_layout()\n            plt.savefig(os.path.join(output_folder, \"blink_duration_histogram.png\"))\n            plt.close()\n            messagebox.showinfo(\"Success\",\"Blink Plots generated successfully.\")\n        else :\n            raise NameError(\"You have not entered a color.\")\n\n        if start_event and end_event and colour and time:\n            print(f\"\u23f1 Analyzing data between '{start_event}' and '{end_event}'...\")\n\n            start_row = events_df[events_df[\"name\"] == start_event]\n            end_row = events_df[events_df[\"name\"] == end_event]\n\n            if start_row.empty or end_row.empty:\n                print(\"\u26a0\ufe0f One of the start or end events does not exist.\")\n                return\n\n            start_ts = start_row[\"timestamp [ns]\"].iloc[0]\n            end_ts = end_row[\"timestamp [ns]\"].iloc[0]\n\n            if start_ts &gt;= end_ts:\n                raise ValueError(\"The start event is after the end event.\")\n\n            # Plots between pairs of events\n            generate_mean_std_plot_between_events(blinks_df, events_df, start_ts, end_ts, \"blinks\", output_folder,colour)\n            generate_mean_std_plot_between_events(fixations_df, events_df, start_ts, end_ts, \"fixations\", output_folder,colour)\n            generate_mean_std_plot_between_events(saccades_df, events_df, start_ts, end_ts, \"saccades\", output_folder,colour)\n\n            generate_frequency_plot_between_events(blinks_df, events_df, start_ts, end_ts, \"blinks\", output_folder,colour)\n            generate_frequency_plot_between_events(fixations_df, events_df, start_ts, end_ts, \"fixations\", output_folder,colour)\n            generate_frequency_plot_between_events(saccades_df, events_df, start_ts, end_ts, \"saccades\", output_folder,colour)\n\n            for df, label in [\n                (fixations_df, \"fixation\"),\n                (blinks_df, \"blink\"),\n                (saccades_df, \"saccade\")\n            ]:\n                generate_time_binned_plots(df, label, start_ts, end_ts, output_folder,colour,time)\n\n            # Gaze plot\n            gaze_plot(gaze_df,events_df,start_ts, end_ts, \"gaze\", output_folder,colour)\n\n            # Pupil plots\n            pupils_diameter_time_binned_plot(pupil_df,events_df,start_ts, end_ts, \"pupils\", output_folder,colour,time)\n            pupils_diameter_plot_between_events(pupil_df,events_df,start_ts, end_ts, \"pupils\", output_folder,colour)\n\n            print(\"\u2705 All plots have been generated successfully.\")\n            messagebox.showinfo(\"Success\", \"Plots generated successfully.\")\n        else :\n            raise NameError(\"You have not provided the following variable(s): start_event, end_event, colour, time.\")\n\n    except Exception as e:\n        print(f\"\u274c Error : {e}\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.generate_time_binned_plots","title":"<code>generate_time_binned_plots(df, label, start_ts, end_ts, output_folder, colour, time)</code>","text":"<p>Generate bar plots of mean duration and count of events over time bins within a specified interval.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing event durations and timestamps.</p> required <code>label</code> <code>str</code> <p>Label for the type of events (e.g., 'blink', 'fixation').</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds.</p> required <code>output_folder</code> <code>str</code> <p>Folder path to save the plots.</p> required <code>colour</code> <code>str</code> <p>Color used for plotting bars.</p> required <code>time</code> <code>int or str</code> <p>Duration of each time bin in seconds.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>main_plots.py</code> <pre><code>def generate_time_binned_plots(df, label, start_ts, end_ts, output_folder, colour, time):\n    \"\"\"\n    Generate bar plots of mean duration and count of events over time bins within a specified interval.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing event durations and timestamps.\n    label : str\n        Label for the type of events (e.g., 'blink', 'fixation').\n    start_ts : int\n        Start timestamp in nanoseconds.\n    end_ts : int\n        End timestamp in nanoseconds.\n    output_folder : str\n        Folder path to save the plots.\n    colour : str\n        Color used for plotting bars.\n    time : int or str\n        Duration of each time bin in seconds.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    interval_ns = int(time) * 1_000_000_000\n    results = []\n    current_start = start_ts\n\n    while current_start &lt; end_ts:\n        current_end = min(current_start + interval_ns, end_ts)\n        mask = (df[\"start timestamp [ns]\"] &gt;= current_start) &amp; (df[\"start timestamp [ns]\"] &lt; current_end)\n        subset = df[mask]\n\n        start_sec = (current_start - start_ts) / 1_000_000_000\n        end_sec = (current_end - start_ts) / 1_000_000_000\n        label_interval = f\"{format_time(start_sec)}\u2013{format_time(end_sec)}\"\n\n        results.append({\n            \"interval\": label_interval,\n            \"mean_duration\": subset[\"duration [ms]\"].mean(),\n            \"count\": subset[\"duration [ms]\"].count()\n        })\n        current_start = current_end\n\n    if results:\n        plot_df = pd.DataFrame(results)\n\n        plt.figure(figsize=(14, 6))\n        plt.bar(plot_df[\"interval\"], plot_df[\"mean_duration\"], color=colour, alpha=0.8)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Mean duration of {label} (ms)\")\n        plt.title(f\"{label.capitalize()} means by tranches of {time}s\")\n        plt.tight_layout()\n        plt.savefig(os.path.join(output_folder, f\"{label}_means_{time}s.png\"))\n        plt.close()\n\n        plt.figure(figsize=(14, 6))\n        plt.bar(plot_df[\"interval\"], plot_df[\"count\"], color=colour, alpha=0.8)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Number of {label}\")\n        plt.title(f\"Number of {label} per {time}s increments\")\n        plt.tight_layout()\n        plt.savefig(os.path.join(output_folder, f\"{label}_count_{time}s.png\"))\n        plt.close()\n    else:\n        print(f\"\u26a0\ufe0f No {label} detected in the interval.\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.pupils_diameter_plot_between_events","title":"<code>pupils_diameter_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour)</code>","text":"<p>Plot mean pupil diameter between consecutive events.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing pupil diameter data with columns 'timestamp [ns]', 'pupil diameter left [mm]', and 'pupil diameter right [mm]'.</p> required <code>events_df</code> <code>DataFrame</code> <p>DataFrame with events including 'timestamp [ns]' and 'name' columns.</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds for the interval.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds for the interval.</p> required <code>label</code> <code>str</code> <p>Label describing the data type (used for plot titles and filenames).</p> required <code>output_folder</code> <code>str</code> <p>Path to folder where the plot image will be saved.</p> required <code>colour</code> <code>str</code> <p>Color to be used in the plot.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Saves a bar plot of mean pupil diameters per event interval to disk. Prints a warning if no data is detected between events.</p> Source code in <code>main_plots.py</code> <pre><code>def pupils_diameter_plot_between_events(df, events_df, start_ts, end_ts, label, output_folder, colour):\n    \"\"\"\n    Plot mean pupil diameter between consecutive events.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing pupil diameter data with columns\n        'timestamp [ns]', 'pupil diameter left [mm]', and 'pupil diameter right [mm]'.\n    events_df : pandas.DataFrame\n        DataFrame with events including 'timestamp [ns]' and 'name' columns.\n    start_ts : int\n        Start timestamp in nanoseconds for the interval.\n    end_ts : int\n        End timestamp in nanoseconds for the interval.\n    label : str\n        Label describing the data type (used for plot titles and filenames).\n    output_folder : str\n        Path to folder where the plot image will be saved.\n    colour : str\n        Color to be used in the plot.\n\n    Returns\n    -------\n    None\n        Saves a bar plot of mean pupil diameters per event interval to disk.\n        Prints a warning if no data is detected between events.\n    \"\"\"\n    interval_events = events_df[(events_df[\"timestamp [ns]\"] &gt;= start_ts) &amp;\n                                (events_df[\"timestamp [ns]\"] &lt;= end_ts)].reset_index(drop=True)\n    results = []\n\n    for i in range(len(interval_events) - 1):\n        e1, e2 = interval_events.iloc[i], interval_events.iloc[i + 1]\n        mask = (df[\"timestamp [ns]\"] &gt;= e1[\"timestamp [ns]\"]) &amp; (df[\"timestamp [ns]\"] &lt; e2[\"timestamp [ns]\"])\n        subset = df[mask]\n\n        results.append({\n            \"label\": f\"{e1['name']} \u279d {e2['name']}\",\n            \"mean_diameter\": ((subset[\"pupil diameter left [mm]\"] + subset[\"pupil diameter right [mm]\"]) / 2).mean(),\n        })\n\n    if results:\n        plot_df = pd.DataFrame(results)\n\n        plt.figure(figsize=(14, 6))\n        plt.bar(plot_df[\"label\"], plot_df[\"mean_diameter\"], color=colour, alpha=0.8)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Mean diameter of {label} (mm)\")\n        plt.title(f\"Mean {label} diameter between events\")\n        plt.tight_layout()\n        plt.savefig(os.path.join(output_folder, f\"{label}_diameter_means_per_event.png\"))\n        plt.close()\n    else:\n        print(f\"\u26a0\ufe0f No {label} detected between events.\")\n</code></pre>"},{"location":"api/main_plots_py/#main_plots.pupils_diameter_time_binned_plot","title":"<code>pupils_diameter_time_binned_plot(df, events_df, start_ts, end_ts, label, output_folder, colour, time)</code>","text":"<p>Generate bar plot of mean pupil diameter over time bins within a specified interval.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing pupil diameter data and timestamps.</p> required <code>events_df</code> <code>DataFrame</code> <p>DataFrame containing event timestamps.</p> required <code>start_ts</code> <code>int</code> <p>Start timestamp in nanoseconds.</p> required <code>end_ts</code> <code>int</code> <p>End timestamp in nanoseconds.</p> required <code>label</code> <code>str</code> <p>Label for the pupil data.</p> required <code>output_folder</code> <code>str</code> <p>Folder path to save the plot.</p> required <code>colour</code> <code>str</code> <p>Color used for plotting bars.</p> required <code>time</code> <code>int or str</code> <p>Duration of each time bin in seconds.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>main_plots.py</code> <pre><code>def pupils_diameter_time_binned_plot(df, events_df, start_ts, end_ts, label, output_folder, colour, time):\n    \"\"\"\n    Generate bar plot of mean pupil diameter over time bins within a specified interval.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame containing pupil diameter data and timestamps.\n    events_df : pandas.DataFrame\n        DataFrame containing event timestamps.\n    start_ts : int\n        Start timestamp in nanoseconds.\n    end_ts : int\n        End timestamp in nanoseconds.\n    label : str\n        Label for the pupil data.\n    output_folder : str\n        Folder path to save the plot.\n    colour : str\n        Color used for plotting bars.\n    time : int or str\n        Duration of each time bin in seconds.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    interval_ns = int(time) * 1_000_000_000\n    results = []\n    current_start = start_ts\n\n    while current_start &lt; end_ts:\n        current_end = min(current_start + interval_ns, end_ts)\n        mask = (df[\"timestamp [ns]\"] &gt;= current_start) &amp; (df[\"timestamp [ns]\"] &lt; current_end)\n        subset = df[mask]\n\n        start_sec = (current_start - start_ts) / 1_000_000_000\n        end_sec = (current_end - start_ts) / 1_000_000_000\n        label_interval = f\"{format_time(start_sec)}\u2013{format_time(end_sec)}\"\n\n        results.append({\n            \"interval\": label_interval,\n            \"mean_diameter\": ((subset[\"pupil diameter left [mm]\"] + subset[\"pupil diameter right [mm]\"]) / 2).mean(),\n        })\n        current_start = current_end\n\n    if results:\n        plot_df = pd.DataFrame(results)\n\n        plt.figure(figsize=(14, 6))\n        plt.bar(plot_df[\"interval\"], plot_df[\"mean_diameter\"], color=colour, alpha=0.8)\n        plt.xticks(rotation=90)\n        plt.ylabel(f\"Mean diameter of {label} (mm)\")\n        plt.title(f\"Mean {label} diameter over time ({time}s bins)\")\n        plt.tight_layout()\n        plt.savefig(os.path.join(output_folder, f\"{label}_diameter_means_{time}s.png\"))\n        plt.close()\n    else:\n        print(f\"\u26a0\ufe0f No {label} detected in the interval.\")\n</code></pre>"}]}